// ROLLUP_NO_REPLACE 
 const index = "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: !0 });\n}, __copyProps = (to, from, except, desc) => {\n  if (from && typeof from == \"object\" || typeof from == \"function\")\n    for (let key of __getOwnPropNames(from))\n      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  return to;\n}, __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// app/entry.server.tsx\nvar entry_server_exports = {};\n__export(entry_server_exports, {\n  default: () => entry_server_default,\n  handleDataRequest: () => handleDataRequest\n});\nimport { RemixServer } from \"@remix-run/react\";\n\n// app/runtime.server.ts\nvar runtime_server_exports = {};\n__export(runtime_server_exports, {\n  default: () => default2\n});\n__reExport(runtime_server_exports, remix_star);\nimport * as remix_star from \"@vercel/remix\";\nimport { default as default2 } from \"@vercel/remix\";\n\n// app/entry.server.tsx\nimport { jsx } from \"react/jsx-runtime\";\nasync function entry_server_default(request, responseStatusCode, responseHeaders, remixContext) {\n  let remixServer = /* @__PURE__ */ jsx(RemixServer, { context: remixContext, url: request.url });\n  return await (0, runtime_server_exports.handleRequest)(\n    request,\n    responseStatusCode,\n    responseHeaders,\n    remixServer\n  );\n}\nvar handleDataRequest = async (response, { request }) => response;\n\n// app/root.tsx\nvar root_exports = {};\n__export(root_exports, {\n  default: () => App,\n  links: () => links\n});\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration\n} from \"@remix-run/react\";\nimport { Analytics } from \"@vercel/analytics/react\";\n\n// app/index.css\nvar app_default = \"/build/_assets/index-3CQVIKHI.css\";\n\n// styled-system/helpers.js\nfunction isObject(value) {\n  return typeof value == \"object\" && value != null && !Array.isArray(value);\n}\nfunction compact(value) {\n  return Object.fromEntries(Object.entries(value ?? {}).filter(([_, value2]) => value2 !== void 0));\n}\nvar isBaseCondition = (v) => v === \"base\";\nfunction filterBaseConditions(c) {\n  return c.slice().filter((v) => !isBaseCondition(v));\n}\nvar importantRegex = /!(important)?/;\nfunction isImportant(value) {\n  return typeof value == \"string\" ? importantRegex.test(value) : !1;\n}\nfunction withoutImportant(value) {\n  return typeof value == \"string\" ? value.replace(importantRegex, \"\").trim() : value;\n}\nfunction withoutSpace(str) {\n  return typeof str == \"string\" ? str.replaceAll(\" \", \"_\") : str;\n}\nfunction toChar(code) {\n  return String.fromCharCode(code + (code > 25 ? 39 : 97));\n}\nfunction toName(code) {\n  let name = \"\", x;\n  for (x = Math.abs(code); x > 52; x = x / 52 | 0)\n    name = toChar(x % 52) + name;\n  return toChar(x % 52) + name;\n}\nfunction toPhash(h, x) {\n  let i = x.length;\n  for (; i; )\n    h = h * 33 ^ x.charCodeAt(--i);\n  return h;\n}\nfunction toHash(value) {\n  return toName(toPhash(5381, value) >>> 0);\n}\nfunction mergeProps(...sources) {\n  return sources.filter(Boolean).reduce((prev, obj) => (Object.keys(obj).forEach((key) => {\n    let prevValue = prev[key], value = obj[key];\n    isObject(prevValue) && isObject(value) ? prev[key] = mergeProps(prevValue, value) : prev[key] = value;\n  }), prev), {});\n}\nvar isNotNullish = (element) => element != null;\nfunction walkObject(target, predicate, options = {}) {\n  let { stop, getKey } = options;\n  function inner(value, path = []) {\n    if (isObject(value) || Array.isArray(value)) {\n      let result = {};\n      for (let [prop, child] of Object.entries(value)) {\n        let key = getKey?.(prop) ?? prop, childPath = [...path, key];\n        if (stop?.(value, childPath))\n          return predicate(value, path);\n        let next = inner(child, childPath);\n        isNotNullish(next) && (result[key] = next);\n      }\n      return result;\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}\nfunction toResponsiveObject(values, breakpoints) {\n  return values.reduce((acc, current, index) => {\n    let key = breakpoints[index];\n    return current != null && (acc[key] = current), acc;\n  }, {});\n}\nfunction normalizeShorthand(styles, context2) {\n  let { hasShorthand, resolveShorthand: resolveShorthand2 } = context2.utility;\n  return walkObject(styles, (v) => v, {\n    getKey: (prop) => hasShorthand ? resolveShorthand2(prop) : prop\n  });\n}\nfunction normalizeStyleObject(styles, context2, shorthand = !0) {\n  let { utility, conditions: conditions2 } = context2, { hasShorthand, resolveShorthand: resolveShorthand2 } = utility;\n  return walkObject(\n    styles,\n    (value) => Array.isArray(value) ? toResponsiveObject(value, conditions2.breakpoints.keys) : value,\n    {\n      stop: (value) => Array.isArray(value),\n      getKey: shorthand ? (prop) => hasShorthand ? resolveShorthand2(prop) : prop : void 0\n    }\n  );\n}\nvar fallbackCondition = {\n  shift: (v) => v,\n  finalize: (v) => v,\n  breakpoints: { keys: [] }\n}, sanitize = (value) => typeof value == \"string\" ? value.replaceAll(/[\\n\\s]+/g, \" \") : value;\nfunction createCss(context2) {\n  let { utility, hash, conditions: conds = fallbackCondition } = context2, formatClassName = (str) => [utility.prefix, str].filter(Boolean).join(\"-\"), hashFn = (conditions2, className) => {\n    let result;\n    if (hash) {\n      let baseArray = [...conds.finalize(conditions2), className];\n      result = formatClassName(toHash(baseArray.join(\":\")));\n    } else\n      result = [...conds.finalize(conditions2), formatClassName(className)].join(\":\");\n    return result;\n  };\n  return (styleObject = {}) => {\n    let normalizedObject = normalizeStyleObject(styleObject, context2), classNames = /* @__PURE__ */ new Set();\n    return walkObject(normalizedObject, (value, paths) => {\n      let important = isImportant(value);\n      if (value == null)\n        return;\n      let [prop, ...allConditions] = conds.shift(paths), conditions2 = filterBaseConditions(allConditions), transformed = utility.transform(prop, withoutImportant(sanitize(value))), className = hashFn(conditions2, transformed.className);\n      important && (className = `${className}!`), classNames.add(className);\n    }), Array.from(classNames).join(\" \");\n  };\n}\nfunction compactStyles(...styles) {\n  return styles.filter((style) => isObject(style) && Object.keys(compact(style)).length > 0);\n}\nfunction createMergeCss(context2) {\n  function resolve(styles) {\n    let allStyles = compactStyles(...styles);\n    return allStyles.length === 1 ? allStyles : allStyles.map((style) => normalizeShorthand(style, context2));\n  }\n  function mergeCss2(...styles) {\n    return mergeProps(...resolve(styles));\n  }\n  function assignCss2(...styles) {\n    return Object.assign({}, ...resolve(styles));\n  }\n  return { mergeCss: mergeCss2, assignCss: assignCss2 };\n}\nvar memo = (fn) => {\n  let cache = /* @__PURE__ */ new Map();\n  return (...args) => {\n    let key = JSON.stringify(args);\n    if (cache.has(key))\n      return cache.get(key);\n    let result = fn(...args);\n    return cache.set(key, result), result;\n  };\n}, wordRegex = /([A-Z])/g, msRegex = /^ms-/, hypenateProperty = memo((property) => property.startsWith(\"--\") ? property : property.replace(wordRegex, \"-$1\").replace(msRegex, \"-ms-\").toLowerCase());\nfunction splitProps(props, ...keys) {\n  let descriptors = Object.getOwnPropertyDescriptors(props), dKeys = Object.keys(descriptors), split = (k) => {\n    let clone = {};\n    for (let i = 0; i < k.length; i++) {\n      let key = k[i];\n      descriptors[key] && (Object.defineProperty(clone, key, descriptors[key]), delete descriptors[key]);\n    }\n    return clone;\n  }, fn = (key) => split(Array.isArray(key) ? key : dKeys.filter(key));\n  return keys.map(fn).concat(split(dKeys));\n}\nvar uniq = (...items) => items.filter(Boolean).reduce((acc, item) => Array.from(/* @__PURE__ */ new Set([...acc, ...item])), []);\nvar htmlProps = [\"htmlSize\", \"htmlTranslate\", \"htmlWidth\", \"htmlHeight\"];\nfunction convert(key) {\n  return htmlProps.includes(key) ? key.replace(\"html\", \"\").toLowerCase() : key;\n}\nfunction normalizeHTMLProps(props) {\n  return Object.fromEntries(Object.entries(props).map(([key, value]) => [convert(key), value]));\n}\nnormalizeHTMLProps.keys = htmlProps;\n\n// styled-system/css/conditions.js\nvar conditionsStr = \"_hover,_focus,_focusWithin,_focusVisible,_disabled,_active,_visited,_target,_readOnly,_readWrite,_empty,_checked,_enabled,_expanded,_highlighted,_before,_after,_firstLetter,_firstLine,_marker,_selection,_file,_backdrop,_first,_last,_only,_even,_odd,_firstOfType,_lastOfType,_onlyOfType,_peerFocus,_peerHover,_peerActive,_peerFocusWithin,_peerFocusVisible,_peerDisabled,_peerChecked,_peerInvalid,_peerExpanded,_peerPlaceholderShown,_groupFocus,_groupHover,_groupActive,_groupFocusWithin,_groupFocusVisible,_groupDisabled,_groupChecked,_groupExpanded,_groupInvalid,_indeterminate,_required,_valid,_invalid,_autofill,_inRange,_outOfRange,_placeholder,_placeholderShown,_pressed,_selected,_default,_optional,_open,_closed,_fullscreen,_loading,_currentPage,_currentStep,_motionReduce,_motionSafe,_print,_landscape,_portrait,_dark,_light,_osDark,_osLight,_highContrast,_lessContrast,_moreContrast,_ltr,_rtl,_scrollbar,_scrollbarThumb,_scrollbarTrack,_horizontal,_vertical,sm,smOnly,smDown,md,mdOnly,mdDown,lg,lgOnly,lgDown,xl,xlOnly,xlDown,2xl,2xlOnly,2xlDown,smToMd,smToLg,smToXl,smTo2xl,mdToLg,mdToXl,mdTo2xl,lgToXl,lgTo2xl,xlTo2xl,base\", conditions = new Set(conditionsStr.split(\",\"));\nfunction isCondition(value) {\n  return conditions.has(value) || /^@|&|&$/.test(value);\n}\nvar underscoreRegex = /^_/, conditionsSelectorRegex = /&|@/;\nfunction finalizeConditions(paths) {\n  return paths.map((path) => conditions.has(path) ? path.replace(underscoreRegex, \"\") : conditionsSelectorRegex.test(path) ? `[${withoutSpace(path.trim())}]` : path);\n}\nfunction sortConditions(paths) {\n  return paths.sort((a, b) => {\n    let aa = isCondition(a), bb = isCondition(b);\n    return aa && !bb ? 1 : !aa && bb ? -1 : 0;\n  });\n}\n\n// styled-system/css/css.js\nvar utilities = \"aspectRatio:aspect,boxDecorationBreak:decoration,zIndex:z,boxSizing:box,objectPosition:object,objectFit:object,overscrollBehavior:overscroll,overscrollBehaviorX:overscroll-x,overscrollBehaviorY:overscroll-y,position:pos/1,top:top,left:left,insetInline:inset-x,insetBlock:inset-y,inset:inset,insetBlockEnd:inset-b,insetBlockStart:inset-t,insetInlineEnd:end/insetEnd/1,insetInlineStart:start/insetStart/1,right:right,bottom:bottom,insetX:inset-x,insetY:inset-y,float:float,visibility:vis,display:d,hideFrom:hide,hideBelow:show,flexBasis:basis,flex:flex,flexDirection:flex/flexDir,flexGrow:grow,flexShrink:shrink,gridTemplateColumns:grid-cols,gridTemplateRows:grid-rows,gridColumn:col-span,gridRow:row-span,gridColumnStart:col-start,gridColumnEnd:col-end,gridAutoFlow:grid-flow,gridAutoColumns:auto-cols,gridAutoRows:auto-rows,gap:gap,gridGap:gap,gridRowGap:gap-x,gridColumnGap:gap-y,rowGap:gap-x,columnGap:gap-y,justifyContent:justify,alignContent:content,alignItems:items,alignSelf:self,padding:p/1,paddingLeft:pl/1,paddingRight:pr/1,paddingTop:pt/1,paddingBottom:pb/1,paddingBlock:py/1/paddingY,paddingBlockEnd:pb,paddingBlockStart:pt,paddingInline:px/paddingX/1,paddingInlineEnd:pe/1/paddingEnd,paddingInlineStart:ps/1/paddingStart,marginLeft:ml/1,marginRight:mr/1,marginTop:mt/1,marginBottom:mb/1,margin:m/1,marginBlock:my/1/marginY,marginBlockEnd:mb,marginBlockStart:mt,marginInline:mx/1/marginX,marginInlineEnd:me/1/marginEnd,marginInlineStart:ms/1/marginStart,outlineWidth:ring/ringWidth,outlineColor:ring/ringColor,outline:ring/1,outlineOffset:ring/ringOffset,divideX:divide-x,divideY:divide-y,divideColor:divide,divideStyle:divide,width:w/1,inlineSize:w,minWidth:min-w/minW,minInlineSize:min-w,maxWidth:max-w/maxW,maxInlineSize:max-w,height:h/1,blockSize:h,minHeight:min-h/minH,minBlockSize:min-h,maxHeight:max-h/maxH,maxBlockSize:max-b,color:text,fontFamily:font,fontSize:fs,fontWeight:font,fontSmoothing:smoothing,fontVariantNumeric:numeric,letterSpacing:tracking,lineHeight:leading,textAlign:text,textDecoration:text-decor,textDecorationColor:text-decor,textEmphasisColor:text-emphasis,textDecorationStyle:decoration,textDecorationThickness:decoration,textUnderlineOffset:underline-offset,textTransform:text,textIndent:indent,textShadow:text-shadow,textOverflow:text,verticalAlign:align,wordBreak:break,textWrap:text,truncate:truncate,lineClamp:clamp,listStyleType:list,listStylePosition:list,listStyleImage:list-img,backgroundPosition:bg/bgPosition,backgroundPositionX:bg-x/bgPositionX,backgroundPositionY:bg-y/bgPositionY,backgroundAttachment:bg/bgAttachment,backgroundClip:bg-clip/bgClip,background:bg/1,backgroundColor:bg/bgColor,backgroundOrigin:bg-origin/bgOrigin,backgroundImage:bg-img/bgImage,backgroundRepeat:bg-repeat/bgRepeat,backgroundBlendMode:bg-blend/bgBlendMode,backgroundSize:bg/bgSize,backgroundGradient:bg-gradient/bgGradient,textGradient:text-gradient,gradientFrom:from,gradientTo:to,gradientVia:via,borderRadius:rounded/1,borderTopLeftRadius:rounded-tl/roundedTopLeft,borderTopRightRadius:rounded-tr/roundedTopRight,borderBottomRightRadius:rounded-br/roundedBottomRight,borderBottomLeftRadius:rounded-bl/roundedBottomLeft,borderTopRadius:rounded-t/roundedTop,borderRightRadius:rounded-r/roundedRight,borderBottomRadius:rounded-b/roundedBottom,borderLeftRadius:rounded-l/roundedLeft,borderStartStartRadius:rounded-ss/roundedStartStart,borderStartEndRadius:rounded-se/roundedStartEnd,borderStartRadius:rounded-s/roundedStart,borderEndStartRadius:rounded-es/roundedEndStart,borderEndEndRadius:rounded-ee/roundedEndEnd,borderEndRadius:rounded-e/roundedEnd,border:border,borderWidth:border-w,borderTopWidth:border-tw,borderLeftWidth:border-lw,borderRightWidth:border-rw,borderBottomWidth:border-bw,borderColor:border,borderInline:border-x/borderX,borderInlineWidth:border-x/borderXWidth,borderInlineColor:border-x/borderXColor,borderBlock:border-y/borderY,borderBlockWidth:border-y/borderYWidth,borderBlockColor:border-y/borderYColor,borderLeft:border-l,borderLeftColor:border-l,borderInlineStart:border-s/borderStart,borderInlineStartWidth:border-s/borderStartWidth,borderInlineStartColor:border-s/borderStartColor,borderRight:border-r,borderRightColor:border-r,borderInlineEnd:border-e/borderEnd,borderInlineEndWidth:border-e/borderEndWidth,borderInlineEndColor:border-e/borderEndColor,borderTop:border-t,borderTopColor:border-t,borderBottom:border-b,borderBottomColor:border-b,borderBlockEnd:border-be,borderBlockEndColor:border-be,borderBlockStart:border-bs,borderBlockStartColor:border-bs,boxShadow:shadow/1,boxShadowColor:shadow/shadowColor,mixBlendMode:mix-blend,filter:filter,brightness:brightness,contrast:contrast,grayscale:grayscale,hueRotate:hue-rotate,invert:invert,saturate:saturate,sepia:sepia,dropShadow:drop-shadow,blur:blur,backdropFilter:backdrop,backdropBlur:backdrop-blur,backdropBrightness:backdrop-brightness,backdropContrast:backdrop-contrast,backdropGrayscale:backdrop-grayscale,backdropHueRotate:backdrop-hue-rotate,backdropInvert:backdrop-invert,backdropOpacity:backdrop-opacity,backdropSaturate:backdrop-saturate,backdropSepia:backdrop-sepia,borderCollapse:border,borderSpacing:border-spacing,borderSpacingX:border-spacing-x,borderSpacingY:border-spacing-y,tableLayout:table,transitionTimingFunction:ease,transitionDelay:delay,transitionDuration:duration,transitionProperty:transition-prop,transition:transition,animation:animation,animationName:animation-name,animationDelay:animation-delay,transformOrigin:origin,scale:scale,scaleX:scale-x,scaleY:scale-y,translate:translate,translateX:translate-x/x,translateY:translate-y/y,accentColor:accent,caretColor:caret,scrollBehavior:scroll,scrollbar:scrollbar,scrollMargin:scroll-m,scrollMarginX:scroll-mx,scrollMarginY:scroll-my,scrollMarginLeft:scroll-ml,scrollMarginRight:scroll-mr,scrollMarginTop:scroll-mt,scrollMarginBottom:scroll-mb,scrollMarginBlock:scroll-my,scrollMarginBlockEnd:scroll-mb,scrollMarginBlockStart:scroll-mt,scrollMarginInline:scroll-mx,scrollMarginInlineEnd:scroll-me,scrollMarginInlineStart:scroll-ms,scrollPadding:scroll-p,scrollPaddingBlock:scroll-pb,scrollPaddingBlockStart:scroll-pt,scrollPaddingBlockEnd:scroll-pb,scrollPaddingInline:scroll-px,scrollPaddingInlineEnd:scroll-pe,scrollPaddingInlineStart:scroll-ps,scrollPaddingX:scroll-px,scrollPaddingY:scroll-py,scrollPaddingLeft:scroll-pl,scrollPaddingRight:scroll-pr,scrollPaddingTop:scroll-pt,scrollPaddingBottom:scroll-pb,scrollSnapAlign:snap,scrollSnapStop:snap,scrollSnapType:snap,scrollSnapStrictness:strictness,scrollSnapMargin:snap-m,scrollSnapMarginTop:snap-mt,scrollSnapMarginBottom:snap-mb,scrollSnapMarginLeft:snap-ml,scrollSnapMarginRight:snap-mr,touchAction:touch,userSelect:select,fill:fill,stroke:stroke,strokeWidth:stroke-w,srOnly:sr,debug:debug,appearance:appearance,backfaceVisibility:backface,clipPath:clip-path,hyphens:hyphens,mask:mask,maskImage:mask-image,maskSize:mask-size,textSizeAdjust:text-size-adjust,textStyle:textStyle\", classNameByProp = /* @__PURE__ */ new Map(), shorthands = /* @__PURE__ */ new Map();\nutilities.split(\",\").forEach((utility) => {\n  let [prop, meta3] = utility.split(\":\"), [className, ...shorthandList] = meta3.split(\"/\");\n  classNameByProp.set(prop, className), shorthandList.length && shorthandList.forEach((shorthand) => {\n    shorthands.set(shorthand === \"1\" ? className : shorthand, prop);\n  });\n});\nvar resolveShorthand = (prop) => shorthands.get(prop) || prop, context = {\n  conditions: {\n    shift: sortConditions,\n    finalize: finalizeConditions,\n    breakpoints: { keys: [\"base\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\"] }\n  },\n  utility: {\n    prefix: \"__proxylist__\",\n    transform: (prop, value) => {\n      let key = resolveShorthand(prop);\n      return { className: `${classNameByProp.get(key) || hypenateProperty(key)}_${withoutSpace(value)}` };\n    },\n    hasShorthand: !0,\n    resolveShorthand\n  }\n}, cssFn = createCss(context), css = (...styles) => cssFn(mergeCss(...styles));\ncss.raw = (...styles) => mergeCss(...styles);\nvar { mergeCss, assignCss } = createMergeCss(context);\n\n// styled-system/css/cx.js\nfunction cx() {\n  let str = \"\", i = 0, arg;\n  for (; i < arguments.length; )\n    (arg = arguments[i++]) && typeof arg == \"string\" && (str && (str += \" \"), str += arg);\n  return str;\n}\n\n// styled-system/css/cva.js\nvar defaults = (conf) => ({\n  base: {},\n  variants: {},\n  defaultVariants: {},\n  compoundVariants: [],\n  ...conf\n});\nfunction cva(config3) {\n  let { base, variants, defaultVariants, compoundVariants } = defaults(config3);\n  function resolve(props = {}) {\n    let computedVariants = { ...defaultVariants, ...compact(props) }, variantCss = { ...base };\n    for (let [key, value] of Object.entries(computedVariants))\n      variants[key]?.[value] && (variantCss = mergeCss(variantCss, variants[key][value]));\n    let compoundVariantCss = getCompoundVariantCss(compoundVariants, computedVariants);\n    return mergeCss(variantCss, compoundVariantCss);\n  }\n  function merge(__cva) {\n    let override = defaults(__cva.config), variantKeys2 = uniq(__cva.variantKeys, Object.keys(variants));\n    return cva({\n      base: mergeCss(base, override.base),\n      variants: Object.fromEntries(\n        variantKeys2.map((key) => [key, mergeCss(variants[key], override.variants[key])])\n      ),\n      defaultVariants: mergeProps(defaultVariants, override.defaultVariants),\n      compoundVariants: [...compoundVariants, ...override.compoundVariants]\n    });\n  }\n  function cvaFn(props) {\n    return css(resolve(props));\n  }\n  let variantKeys = Object.keys(variants);\n  function splitVariantProps(props) {\n    return splitProps(props, variantKeys);\n  }\n  let variantMap = Object.fromEntries(Object.entries(variants).map(([key, value]) => [key, Object.keys(value)]));\n  return Object.assign(cvaFn, {\n    __cva__: !0,\n    variantMap,\n    variantKeys,\n    raw: resolve,\n    config: config3,\n    merge,\n    splitVariantProps\n  });\n}\nfunction getCompoundVariantCss(compoundVariants, variantMap) {\n  let result = {};\n  return compoundVariants.forEach((compoundVariant) => {\n    Object.entries(compoundVariant).every(([key, value]) => key === \"css\" ? !0 : (Array.isArray(value) ? value : [value]).some((value2) => variantMap[key] === value2)) && (result = mergeCss(result, compoundVariant.css));\n  }), result;\n}\n\n// app/root.classes.ts\nvar root = css({\n  background: \"linear-gradient(109.6deg, rgb(36, 45, 57) 11.2%, rgb(16, 37, 60) 51.2%, rgb(0, 0, 0) 98.6%);\",\n  color: \"white\",\n  height: \"100%\",\n  overflowY: \"scroll\"\n});\n\n// app/root.tsx\nimport { jsx as jsx2, jsxs } from \"react/jsx-runtime\";\nvar links = () => [\n  { rel: \"preload\", href: app_default, as: \"style\" },\n  { rel: \"stylesheet\", href: app_default },\n  void 0 ? { rel: \"preload\", href: void 0, as: \"style\" } : void 0,\n  void 0 ? { rel: \"stylesheet\", href: void 0 } : void 0,\n  { rel: \"mask-icon\", href: \"/favicons/mask-icon.svg\" },\n  {\n    rel: \"alternate icon\",\n    type: \"image/png\",\n    href: \"/favicons/favicon-32x32.png\"\n  },\n  { rel: \"apple-touch-icon\", href: \"/favicons/apple-touch-icon.png\" },\n  {\n    rel: \"manifest\",\n    href: \"/site.webmanifest\",\n    crossOrigin: \"use-credentials\"\n  },\n  // necessary to make typescript happy\n  //These should match the css preloads above to avoid css as render blocking resource\n  { rel: \"icon\", type: \"image/svg+xml\", href: \"/favicons/favicon.svg\" }\n].filter(Boolean);\nfunction App() {\n  return /* @__PURE__ */ jsxs(\"html\", { lang: \"en\", children: [\n    /* @__PURE__ */ jsxs(\"head\", { children: [\n      /* @__PURE__ */ jsx2(\"meta\", { charSet: \"utf-8\" }),\n      /* @__PURE__ */ jsx2(\"meta\", { name: \"viewport\", content: \"width=device-width, initial-scale=1\" }),\n      /* @__PURE__ */ jsx2(\"meta\", { name: \"author\", content: \"A kiwi developer in incognito mode.\" }),\n      /* @__PURE__ */ jsx2(\n        \"meta\",\n        {\n          name: \"description\",\n          content: \"ProxyList. Find all the proxies you need. Http(s), Socks4 & Socks5.\"\n        }\n      ),\n      /* @__PURE__ */ jsx2(\n        \"meta\",\n        {\n          name: \"keywords\",\n          content: \"Http, Https, Socks4, Socks5, Proxy, ProxyList, Proxies, Anonymous, Hide, I.P, IP, Address, Incognito, VPN, Virtual, Private, Network, Virtual Private Network, Stealth, Hidden\"\n        }\n      ),\n      /* @__PURE__ */ jsx2(Meta, {}),\n      /* @__PURE__ */ jsx2(Links, {})\n    ] }),\n    /* @__PURE__ */ jsxs(\"body\", { className: root, children: [\n      /* @__PURE__ */ jsx2(Outlet, {}),\n      /* @__PURE__ */ jsx2(ScrollRestoration, {}),\n      /* @__PURE__ */ jsx2(Scripts, {}),\n      /* @__PURE__ */ jsx2(LiveReload, {}),\n      /* @__PURE__ */ jsx2(Analytics, {})\n    ] })\n  ] });\n}\n\n// app/routes/_base._index.tsx\nvar base_index_exports = {};\n__export(base_index_exports, {\n  config: () => config,\n  default: () => Index,\n  loader: () => loader,\n  meta: () => meta\n});\nimport { Await, Link, useFetcher, useLoaderData } from \"@remix-run/react\";\nimport { Suspense } from \"react\";\n\n// styled-system/jsx/factory.js\nimport { createElement, forwardRef, useMemo } from \"react\";\n\n// styled-system/jsx/is-valid-prop.js\nvar userGeneratedStr = \"css,pos,insetEnd,end,insetStart,start,flexDir,p,pl,pr,pt,pb,py,paddingY,paddingX,px,pe,paddingEnd,ps,paddingStart,ml,mr,mt,mb,m,my,marginY,mx,marginX,me,marginEnd,ms,marginStart,ringWidth,ringColor,ring,ringOffset,w,minW,maxW,h,minH,maxH,bgPosition,bgPositionX,bgPositionY,bgAttachment,bgClip,bg,bgColor,bgOrigin,bgImage,bgRepeat,bgBlendMode,bgSize,bgGradient,rounded,roundedTopLeft,roundedTopRight,roundedBottomRight,roundedBottomLeft,roundedTop,roundedRight,roundedBottom,roundedLeft,roundedStartStart,roundedStartEnd,roundedStart,roundedEndStart,roundedEndEnd,roundedEnd,borderX,borderXWidth,borderXColor,borderY,borderYWidth,borderYColor,borderStart,borderStartWidth,borderStartColor,borderEnd,borderEndWidth,borderEndColor,shadow,shadowColor,x,y,aspectRatio,boxDecorationBreak,zIndex,boxSizing,objectPosition,objectFit,overscrollBehavior,overscrollBehaviorX,overscrollBehaviorY,position,top,left,insetInline,insetBlock,inset,insetBlockEnd,insetBlockStart,insetInlineEnd,insetInlineStart,right,bottom,insetX,insetY,float,visibility,display,hideFrom,hideBelow,flexBasis,flex,flexDirection,flexGrow,flexShrink,gridTemplateColumns,gridTemplateRows,gridColumn,gridRow,gridColumnStart,gridColumnEnd,gridAutoFlow,gridAutoColumns,gridAutoRows,gap,gridGap,gridRowGap,gridColumnGap,rowGap,columnGap,justifyContent,alignContent,alignItems,alignSelf,padding,paddingLeft,paddingRight,paddingTop,paddingBottom,paddingBlock,paddingBlockEnd,paddingBlockStart,paddingInline,paddingInlineEnd,paddingInlineStart,marginLeft,marginRight,marginTop,marginBottom,margin,marginBlock,marginBlockEnd,marginBlockStart,marginInline,marginInlineEnd,marginInlineStart,outlineWidth,outlineColor,outline,outlineOffset,divideX,divideY,divideColor,divideStyle,width,inlineSize,minWidth,minInlineSize,maxWidth,maxInlineSize,height,blockSize,minHeight,minBlockSize,maxHeight,maxBlockSize,color,fontFamily,fontSize,fontWeight,fontSmoothing,fontVariantNumeric,letterSpacing,lineHeight,textAlign,textDecoration,textDecorationColor,textEmphasisColor,textDecorationStyle,textDecorationThickness,textUnderlineOffset,textTransform,textIndent,textShadow,textOverflow,verticalAlign,wordBreak,textWrap,truncate,lineClamp,listStyleType,listStylePosition,listStyleImage,backgroundPosition,backgroundPositionX,backgroundPositionY,backgroundAttachment,backgroundClip,background,backgroundColor,backgroundOrigin,backgroundImage,backgroundRepeat,backgroundBlendMode,backgroundSize,backgroundGradient,textGradient,gradientFrom,gradientTo,gradientVia,borderRadius,borderTopLeftRadius,borderTopRightRadius,borderBottomRightRadius,borderBottomLeftRadius,borderTopRadius,borderRightRadius,borderBottomRadius,borderLeftRadius,borderStartStartRadius,borderStartEndRadius,borderStartRadius,borderEndStartRadius,borderEndEndRadius,borderEndRadius,border,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,borderColor,borderInline,borderInlineWidth,borderInlineColor,borderBlock,borderBlockWidth,borderBlockColor,borderLeft,borderLeftColor,borderInlineStart,borderInlineStartWidth,borderInlineStartColor,borderRight,borderRightColor,borderInlineEnd,borderInlineEndWidth,borderInlineEndColor,borderTop,borderTopColor,borderBottom,borderBottomColor,borderBlockEnd,borderBlockEndColor,borderBlockStart,borderBlockStartColor,opacity,boxShadow,boxShadowColor,mixBlendMode,filter,brightness,contrast,grayscale,hueRotate,invert,saturate,sepia,dropShadow,blur,backdropFilter,backdropBlur,backdropBrightness,backdropContrast,backdropGrayscale,backdropHueRotate,backdropInvert,backdropOpacity,backdropSaturate,backdropSepia,borderCollapse,borderSpacing,borderSpacingX,borderSpacingY,tableLayout,transitionTimingFunction,transitionDelay,transitionDuration,transitionProperty,transition,animation,animationName,animationDelay,transformOrigin,scale,scaleX,scaleY,translate,translateX,translateY,accentColor,caretColor,scrollBehavior,scrollbar,scrollMargin,scrollMarginX,scrollMarginY,scrollMarginLeft,scrollMarginRight,scrollMarginTop,scrollMarginBottom,scrollMarginBlock,scrollMarginBlockEnd,scrollMarginBlockStart,scrollMarginInline,scrollMarginInlineEnd,scrollMarginInlineStart,scrollPadding,scrollPaddingBlock,scrollPaddingBlockStart,scrollPaddingBlockEnd,scrollPaddingInline,scrollPaddingInlineEnd,scrollPaddingInlineStart,scrollPaddingX,scrollPaddingY,scrollPaddingLeft,scrollPaddingRight,scrollPaddingTop,scrollPaddingBottom,scrollSnapAlign,scrollSnapStop,scrollSnapType,scrollSnapStrictness,scrollSnapMargin,scrollSnapMarginTop,scrollSnapMarginBottom,scrollSnapMarginLeft,scrollSnapMarginRight,touchAction,userSelect,fill,stroke,strokeWidth,srOnly,debug,appearance,backfaceVisibility,clipPath,hyphens,mask,maskImage,maskSize,textSizeAdjust,colorPalette,textStyle,_hover,_focus,_focusWithin,_focusVisible,_disabled,_active,_visited,_target,_readOnly,_readWrite,_empty,_checked,_enabled,_expanded,_highlighted,_before,_after,_firstLetter,_firstLine,_marker,_selection,_file,_backdrop,_first,_last,_only,_even,_odd,_firstOfType,_lastOfType,_onlyOfType,_peerFocus,_peerHover,_peerActive,_peerFocusWithin,_peerFocusVisible,_peerDisabled,_peerChecked,_peerInvalid,_peerExpanded,_peerPlaceholderShown,_groupFocus,_groupHover,_groupActive,_groupFocusWithin,_groupFocusVisible,_groupDisabled,_groupChecked,_groupExpanded,_groupInvalid,_indeterminate,_required,_valid,_invalid,_autofill,_inRange,_outOfRange,_placeholder,_placeholderShown,_pressed,_selected,_default,_optional,_open,_closed,_fullscreen,_loading,_currentPage,_currentStep,_motionReduce,_motionSafe,_print,_landscape,_portrait,_dark,_light,_osDark,_osLight,_highContrast,_lessContrast,_moreContrast,_ltr,_rtl,_scrollbar,_scrollbarThumb,_scrollbarTrack,_horizontal,_vertical,sm,smOnly,smDown,md,mdOnly,mdDown,lg,lgOnly,lgDown,xl,xlOnly,xlDown,2xl,2xlOnly,2xlDown,smToMd,smToLg,smToXl,smTo2xl,mdToLg,mdToXl,mdTo2xl,lgToXl,lgTo2xl,xlTo2xl\", userGenerated = userGeneratedStr.split(\",\"), cssPropertiesStr = \"WebkitAppearance,WebkitBorderBefore,WebkitBorderBeforeColor,WebkitBorderBeforeStyle,WebkitBorderBeforeWidth,WebkitBoxReflect,WebkitLineClamp,WebkitMask,WebkitMaskAttachment,WebkitMaskClip,WebkitMaskComposite,WebkitMaskImage,WebkitMaskOrigin,WebkitMaskPosition,WebkitMaskPositionX,WebkitMaskPositionY,WebkitMaskRepeat,WebkitMaskRepeatX,WebkitMaskRepeatY,WebkitMaskSize,WebkitOverflowScrolling,WebkitTapHighlightColor,WebkitTextFillColor,WebkitTextStroke,WebkitTextStrokeColor,WebkitTextStrokeWidth,WebkitTouchCallout,WebkitUserModify,accentColor,alignContent,alignItems,alignSelf,alignTracks,all,animation,animationComposition,animationDelay,animationDirection,animationDuration,animationFillMode,animationIterationCount,animationName,animationPlayState,animationTimingFunction,animationTimeline,appearance,aspectRatio,azimuth,backdropFilter,backfaceVisibility,background,backgroundAttachment,backgroundBlendMode,backgroundClip,backgroundColor,backgroundImage,backgroundOrigin,backgroundPosition,backgroundPositionX,backgroundPositionY,backgroundRepeat,backgroundSize,blockOverflow,blockSize,border,borderBlock,borderBlockColor,borderBlockStyle,borderBlockWidth,borderBlockEnd,borderBlockEndColor,borderBlockEndStyle,borderBlockEndWidth,borderBlockStart,borderBlockStartColor,borderBlockStartStyle,borderBlockStartWidth,borderBottom,borderBottomColor,borderBottomLeftRadius,borderBottomRightRadius,borderBottomStyle,borderBottomWidth,borderCollapse,borderColor,borderEndEndRadius,borderEndStartRadius,borderImage,borderImageOutset,borderImageRepeat,borderImageSlice,borderImageSource,borderImageWidth,borderInline,borderInlineEnd,borderInlineColor,borderInlineStyle,borderInlineWidth,borderInlineEndColor,borderInlineEndStyle,borderInlineEndWidth,borderInlineStart,borderInlineStartColor,borderInlineStartStyle,borderInlineStartWidth,borderLeft,borderLeftColor,borderLeftStyle,borderLeftWidth,borderRadius,borderRight,borderRightColor,borderRightStyle,borderRightWidth,borderSpacing,borderStartEndRadius,borderStartStartRadius,borderStyle,borderTop,borderTopColor,borderTopLeftRadius,borderTopRightRadius,borderTopStyle,borderTopWidth,borderWidth,bottom,boxAlign,boxDecorationBreak,boxDirection,boxFlex,boxFlexGroup,boxLines,boxOrdinalGroup,boxOrient,boxPack,boxShadow,boxSizing,breakAfter,breakBefore,breakInside,captionSide,caret,caretColor,caretShape,clear,clip,clipPath,color,colorScheme,columnCount,columnFill,columnGap,columnRule,columnRuleColor,columnRuleStyle,columnRuleWidth,columnSpan,columnWidth,columns,contain,containIntrinsicSize,containIntrinsicBlockSize,containIntrinsicHeight,containIntrinsicInlineSize,containIntrinsicWidth,container,containerName,containerType,content,contentVisibility,counterIncrement,counterReset,counterSet,cursor,direction,display,emptyCells,filter,flex,flexBasis,flexDirection,flexFlow,flexGrow,flexShrink,flexWrap,float,font,fontFamily,fontFeatureSettings,fontKerning,fontLanguageOverride,fontOpticalSizing,fontPalette,fontVariationSettings,fontSize,fontSizeAdjust,fontSmooth,fontStretch,fontStyle,fontSynthesis,fontVariant,fontVariantAlternates,fontVariantCaps,fontVariantEastAsian,fontVariantEmoji,fontVariantLigatures,fontVariantNumeric,fontVariantPosition,fontWeight,forcedColorAdjust,gap,grid,gridArea,gridAutoColumns,gridAutoFlow,gridAutoRows,gridColumn,gridColumnEnd,gridColumnGap,gridColumnStart,gridGap,gridRow,gridRowEnd,gridRowGap,gridRowStart,gridTemplate,gridTemplateAreas,gridTemplateColumns,gridTemplateRows,hangingPunctuation,height,hyphenateCharacter,hyphenateLimitChars,hyphens,imageOrientation,imageRendering,imageResolution,imeMode,initialLetter,initialLetterAlign,inlineSize,inputSecurity,inset,insetBlock,insetBlockEnd,insetBlockStart,insetInline,insetInlineEnd,insetInlineStart,isolation,justifyContent,justifyItems,justifySelf,justifyTracks,left,letterSpacing,lineBreak,lineClamp,lineHeight,lineHeightStep,listStyle,listStyleImage,listStylePosition,listStyleType,margin,marginBlock,marginBlockEnd,marginBlockStart,marginBottom,marginInline,marginInlineEnd,marginInlineStart,marginLeft,marginRight,marginTop,marginTrim,mask,maskBorder,maskBorderMode,maskBorderOutset,maskBorderRepeat,maskBorderSlice,maskBorderSource,maskBorderWidth,maskClip,maskComposite,maskImage,maskMode,maskOrigin,maskPosition,maskRepeat,maskSize,maskType,masonryAutoFlow,mathDepth,mathShift,mathStyle,maxBlockSize,maxHeight,maxInlineSize,maxLines,maxWidth,minBlockSize,minHeight,minInlineSize,minWidth,mixBlendMode,objectFit,objectPosition,offset,offsetAnchor,offsetDistance,offsetPath,offsetPosition,offsetRotate,opacity,order,orphans,outline,outlineColor,outlineOffset,outlineStyle,outlineWidth,overflow,overflowAnchor,overflowBlock,overflowClipBox,overflowClipMargin,overflowInline,overflowWrap,overflowX,overflowY,overscrollBehavior,overscrollBehaviorBlock,overscrollBehaviorInline,overscrollBehaviorX,overscrollBehaviorY,padding,paddingBlock,paddingBlockEnd,paddingBlockStart,paddingBottom,paddingInline,paddingInlineEnd,paddingInlineStart,paddingLeft,paddingRight,paddingTop,page,pageBreakAfter,pageBreakBefore,pageBreakInside,paintOrder,perspective,perspectiveOrigin,placeContent,placeItems,placeSelf,pointerEvents,position,printColorAdjust,quotes,resize,right,rotate,rowGap,rubyAlign,rubyMerge,rubyPosition,scale,scrollbarColor,scrollbarGutter,scrollbarWidth,scrollBehavior,scrollMargin,scrollMarginBlock,scrollMarginBlockStart,scrollMarginBlockEnd,scrollMarginBottom,scrollMarginInline,scrollMarginInlineStart,scrollMarginInlineEnd,scrollMarginLeft,scrollMarginRight,scrollMarginTop,scrollPadding,scrollPaddingBlock,scrollPaddingBlockStart,scrollPaddingBlockEnd,scrollPaddingBottom,scrollPaddingInline,scrollPaddingInlineStart,scrollPaddingInlineEnd,scrollPaddingLeft,scrollPaddingRight,scrollPaddingTop,scrollSnapAlign,scrollSnapCoordinate,scrollSnapDestination,scrollSnapPointsX,scrollSnapPointsY,scrollSnapStop,scrollSnapType,scrollSnapTypeX,scrollSnapTypeY,scrollTimeline,scrollTimelineAxis,scrollTimelineName,shapeImageThreshold,shapeMargin,shapeOutside,tabSize,tableLayout,textAlign,textAlignLast,textCombineUpright,textDecoration,textDecorationColor,textDecorationLine,textDecorationSkip,textDecorationSkipInk,textDecorationStyle,textDecorationThickness,textEmphasis,textEmphasisColor,textEmphasisPosition,textEmphasisStyle,textIndent,textJustify,textOrientation,textOverflow,textRendering,textShadow,textSizeAdjust,textTransform,textUnderlineOffset,textUnderlinePosition,top,touchAction,transform,transformBox,transformOrigin,transformStyle,transition,transitionDelay,transitionDuration,transitionProperty,transitionTimingFunction,translate,unicodeBidi,userSelect,verticalAlign,viewTransitionName,visibility,whiteSpace,widows,width,willChange,wordBreak,wordSpacing,wordWrap,writingMode,zIndex,zoom,alignmentBaseline,baselineShift,clipRule,colorInterpolation,colorRendering,dominantBaseline,fill,fillOpacity,fillRule,floodColor,floodOpacity,glyphOrientationVertical,lightingColor,marker,markerEnd,markerMid,markerStart,shapeRendering,stopColor,stopOpacity,stroke,strokeDasharray,strokeDashoffset,strokeLinecap,strokeLinejoin,strokeMiterlimit,strokeOpacity,strokeWidth,textAnchor,vectorEffect\", allCssProperties = cssPropertiesStr.split(\",\").concat(userGenerated), properties = new Map(allCssProperties.map((prop) => [prop, !0])), cssPropertySelectorRegex = /&|@/, isCssProperty = /* @__PURE__ */ memo((prop) => properties.has(prop) || prop.startsWith(\"--\") || cssPropertySelectorRegex.test(prop));\n\n// styled-system/jsx/factory-helper.js\nvar defaultShouldForwardProp = (prop, variantKeys) => !variantKeys.includes(prop) && !isCssProperty(prop), composeShouldForwardProps = (tag, shouldForwardProp) => tag.__shouldForwardProps__ && shouldForwardProp ? (propName) => tag.__shouldForwardProps__(propName) && shouldForwardProp(propName) : shouldForwardProp, composeCvaFn = (cvaA, cvaB) => {\n  if (cvaA && !cvaB)\n    return cvaA;\n  if (!cvaA && cvaB)\n    return cvaB;\n  if (cvaA.__cva__ && cvaB.__cva__ || cvaA.__recipe__ && cvaB.__recipe__)\n    return cvaA.merge(cvaB);\n  let error = new TypeError(\"Cannot merge cva with recipe. Please use either cva or recipe.\");\n  throw TypeError.captureStackTrace?.(error), error;\n}, getDisplayName = (Component) => typeof Component == \"string\" ? Component : Component?.displayName || Component?.name || \"Component\";\n\n// styled-system/jsx/factory.js\nfunction styledFn(Dynamic, configOrCva = {}, options = {}) {\n  let cvaFn = configOrCva.__cva__ || configOrCva.__recipe__ ? configOrCva : cva(configOrCva), forwardFn = options.shouldForwardProp || defaultShouldForwardProp, shouldForwardProp = (prop) => forwardFn(prop, cvaFn.variantKeys), defaultProps = Object.assign(\n    options.dataAttr && configOrCva.__name__ ? { \"data-recipe\": configOrCva.__name__ } : {},\n    options.defaultProps\n  ), StyledComponent = /* @__PURE__ */ forwardRef(function(props, ref) {\n    let { as: Element = Dynamic.__base__ || Dynamic, children, ...restProps } = props, __cvaFn__ = composeCvaFn(Dynamic.__cva__, cvaFn), __shouldForwardProps__ = composeShouldForwardProps(Dynamic, shouldForwardProp), combinedProps = useMemo(() => Object.assign({}, defaultProps, restProps), [restProps]), [htmlProps2, forwardedProps, variantProps, styleProps, elementProps] = useMemo(() => splitProps(combinedProps, normalizeHTMLProps.keys, __shouldForwardProps__, __cvaFn__.variantKeys, isCssProperty), [combinedProps]);\n    function recipeClass() {\n      let { css: cssStyles, ...propStyles } = styleProps, compoundVariantStyles = __cvaFn__.__getCompoundVariantCss__?.(variantProps);\n      return cx(__cvaFn__(variantProps, !1), css(compoundVariantStyles, propStyles, cssStyles), combinedProps.className);\n    }\n    function cvaClass() {\n      let { css: cssStyles, ...propStyles } = styleProps, cvaStyles = __cvaFn__.raw(variantProps);\n      return cx(css(cvaStyles, propStyles, cssStyles), combinedProps.className);\n    }\n    let classes3 = configOrCva.__recipe__ ? recipeClass : cvaClass;\n    return createElement(Element, {\n      ref,\n      ...forwardedProps,\n      ...elementProps,\n      ...normalizeHTMLProps(htmlProps2),\n      className: classes3()\n    }, combinedProps.children ?? children);\n  }), name = getDisplayName(Dynamic);\n  return StyledComponent.displayName = `styled.${name}`, StyledComponent.__cva__ = cvaFn, StyledComponent.__base__ = Dynamic, StyledComponent.__shouldForwardProps__ = shouldForwardProp, StyledComponent;\n}\nfunction createJsxFactory() {\n  let cache = /* @__PURE__ */ new Map();\n  return new Proxy(styledFn, {\n    apply(_, __, args) {\n      return styledFn(...args);\n    },\n    get(_, el) {\n      return cache.has(el) || cache.set(el, styledFn(el)), cache.get(el);\n    }\n  });\n}\nvar styled = /* @__PURE__ */ createJsxFactory();\n\n// app/components/component.tsx\nvar component_default = styled(\"div\");\n\n// app/components/button.tsx\nimport { jsx as jsx3 } from \"react/jsx-runtime\";\nvar button_default = styled((props) => /* @__PURE__ */ jsx3(component_default, { as: \"button\", ...props }));\n\n// app/routes/_base._index.tsx\nimport { Fragment, jsx as jsx4, jsxs as jsxs2 } from \"react/jsx-runtime\";\nvar config = { runtime: \"nodejs\" }, meta = () => [{ title: \"ProxyList - Home\" }], loader = ({\n  request,\n  context: context2,\n  params\n}) => (0, runtime_server_exports.defer)(\n  {\n    myData: new Promise((res) => {\n      setTimeout(\n        () => res({\n          myData: [1, 2, 3, 4, 5, 6]\n        }),\n        800\n      );\n    })\n  }\n);\nfunction Index() {\n  let { myData } = useLoaderData(), fetcher = useFetcher();\n  return /* @__PURE__ */ jsxs2(Fragment, { children: [\n    /* @__PURE__ */ jsx4(component_default, { children: \"Ttttttt1ff2345678910111213144591092012\" }),\n    /* @__PURE__ */ jsx4(Suspense, { fallback: /* @__PURE__ */ jsx4(\"p\", { children: \"...Loading\" }), children: /* @__PURE__ */ jsx4(Await, { resolve: myData, children: (myData2) => /* @__PURE__ */ jsx4(\"p\", { children: JSON.stringify(myData2) }) }) }),\n    /* @__PURE__ */ jsx4(Link, { to: \"/\", children: \"Self\" }),\n    /* @__PURE__ */ jsx4(\"a\", { href: \"/\", children: \"Refresh\" }),\n    /* @__PURE__ */ jsx4(fetcher.Form, { method: \"post\", action: \"/test\", children: /* @__PURE__ */ jsx4(button_default, { type: \"submit\", width: \"200px\", backgroundColor: \"red\", mt: 4, children: \"Invalidate Cache\" }) })\n  ] });\n}\n\n// app/routes/_base/route.tsx\nvar route_exports = {};\n__export(route_exports, {\n  config: () => config2,\n  default: () => App2,\n  meta: () => meta2\n});\nimport { Outlet as Outlet2 } from \"@remix-run/react\";\n\n// app/components/container.tsx\nimport { jsx as jsx5 } from \"react/jsx-runtime\";\nfunction Container({\n  children,\n  center = !0,\n  fluid = !1,\n  className\n}) {\n  return /* @__PURE__ */ jsx5(\n    component_default,\n    {\n      className: cx(\"container\", fluid ? void 0 : classes.root, className),\n      margin: center ? \"0 auto\" : \"0px\",\n      children\n    }\n  );\n}\nvar classes = {\n  root: css({\n    maxWidth: {\n      sm: \"token(sizes.breakpoint-sm)\",\n      md: \"token(sizes.breakpoint-md)\",\n      lg: \"token(sizes.breakpoint-lg)\",\n      xl: \"token(sizes.breakpoint-xl)\",\n      \"2xl\": \"token(sizes.breakpoint-2xl)\"\n    }\n    // boxShadow: \"token(shadows.sm)\"\n  })\n};\n\n// app/routes/_base/footer.tsx\nimport { jsx as jsx6 } from \"react/jsx-runtime\";\nvar Footer = () => /* @__PURE__ */ jsx6(component_default, { as: \"footer\", children: \"Footer\" });\nFooter.displayName = \"Footer\";\nvar footer_default = Footer;\n\n// app/routes/_base/header.tsx\nimport { Form, Link as Link2 } from \"@remix-run/react\";\nimport { jsx as jsx7, jsxs as jsxs3 } from \"react/jsx-runtime\";\nvar Header = () => /* @__PURE__ */ jsxs3(component_default, { as: \"header\", display: \"flex\", justifyContent: \"space-between\", children: [\n  /* @__PURE__ */ jsx7(Link2, { to: \"/\", children: /* @__PURE__ */ jsx7(component_default, { as: \"h1\", children: \"ProxyList\" }) }),\n  /* @__PURE__ */ jsx7(Form, { method: \"GET\", action: \"/login\", children: /* @__PURE__ */ jsx7(button_default, { type: \"submit\", children: \"Login\" }) })\n] });\nHeader.displayName = \"Header\";\nvar header_default = Header;\n\n// app/routes/_base/route.tsx\nimport { jsx as jsx8, jsxs as jsxs4 } from \"react/jsx-runtime\";\nvar meta2 = () => [{ title: \"ProxyList\" }], config2 = { runtime: \"nodejs\" };\nfunction App2() {\n  return /* @__PURE__ */ jsxs4(Container, { className: classes2.container, children: [\n    /* @__PURE__ */ jsx8(header_default, {}),\n    /* @__PURE__ */ jsx8(\"main\", { className: classes2.main, children: /* @__PURE__ */ jsx8(Outlet2, {}) }),\n    /* @__PURE__ */ jsx8(footer_default, {})\n  ] });\n}\nvar classes2 = {\n  container: css({ height: \"100%\", padding: \"4rem 2rem\" }),\n  main: css({\n    padding: \"2rem 0rem\",\n    height: \"100%\"\n  })\n};\n\n// server-assets-manifest:@remix-run/dev/assets-manifest\nvar assets_manifest_default = { entry: { module: \"/build/entry.client-JUTZMTF5.js\", imports: [\"/build/_shared/chunk-I6TKOM2L.js\"] }, routes: { root: { id: \"root\", parentId: void 0, path: \"\", index: void 0, caseSensitive: void 0, module: \"/build/root-FPZNQEVJ.js\", imports: [\"/build/_shared/chunk-D6XXOTNC.js\"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, \"routes/_base\": { id: \"routes/_base\", parentId: \"root\", path: void 0, index: void 0, caseSensitive: void 0, module: \"/build/routes/_base-HQRIV5CS.js\", imports: [\"/build/_shared/chunk-GZOADVII.js\"], hasAction: !1, hasLoader: !1, hasErrorBoundary: !1 }, \"routes/_base._index\": { id: \"routes/_base._index\", parentId: \"routes/_base\", path: void 0, index: !0, caseSensitive: void 0, module: \"/build/routes/_base._index-YADSSTYG.js\", imports: [\"/build/_shared/chunk-D6XXOTNC.js\"], hasAction: !1, hasLoader: !0, hasErrorBoundary: !1 } }, version: \"87ef99a3\", hmr: void 0, url: \"/build/manifest-87EF99A3.js\" };\n\n// server-entry-module:@remix-run/dev/server-build\nvar mode = \"production\", assetsBuildDirectory = \"remix-frontend\", future = {}, publicPath = \"/build/\", entry = { module: entry_server_exports }, routes = {\n  root: {\n    id: \"root\",\n    parentId: void 0,\n    path: \"\",\n    index: void 0,\n    caseSensitive: void 0,\n    module: root_exports\n  },\n  \"routes/_base._index\": {\n    id: \"routes/_base._index\",\n    parentId: \"routes/_base\",\n    path: void 0,\n    index: !0,\n    caseSensitive: void 0,\n    module: base_index_exports\n  },\n  \"routes/_base\": {\n    id: \"routes/_base\",\n    parentId: \"root\",\n    path: void 0,\n    index: void 0,\n    caseSensitive: void 0,\n    module: route_exports\n  }\n};\nexport {\n  assets_manifest_default as assets,\n  assetsBuildDirectory,\n  entry,\n  future,\n  mode,\n  publicPath,\n  routes\n};\n";

export { index as default };
//# sourceMappingURL=index.mjs.map
