{
  "version": 3,
  "sources": ["empty-module:~/runtime.server", "../../../app/routes/_base._index.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_base._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_base._index.tsx\");\n  import.meta.hot.lastModified = \"1703652900605.5874\";\n}\n// REMIX HMR END\n\nimport { defer } from \"~/runtime.server\";\nimport { Await, Link, useFetcher, useLoaderData } from \"@remix-run/react\";\nimport { Suspense } from \"react\";\nimport Button from \"~/components/button\";\nimport Component from \"~/components/component\";\nexport const config = {\n  runtime: \"edge\"\n};\nexport const meta = () => {\n  return [{\n    title: \"ProxyList - Home\"\n  }];\n};\nexport const headers = headers => {\n  return {\n    \"Cache-Control\": headers.loaderHeaders.get(\"Cache-Control\"),\n    ETag: headers.loaderHeaders.get(\"ETag\")\n  };\n};\nexport const loader = ({\n  request,\n  context,\n  params\n}) => {\n  // const etag = request.headers.get(\"If-None-Match\");\n\n  return defer({\n    myData: new Promise(res => {\n      setTimeout(() => res({\n        myData: [1, 2, 3, 4, 5, 6]\n      }), 800);\n    })\n  });\n};\nexport default function Index() {\n  _s();\n  const {\n    myData\n  } = useLoaderData();\n  const fetcher = useFetcher();\n  return <>\n      <Component>Hello</Component>\n      <Suspense fallback={<p>...Loading</p>}>\n        <Await resolve={myData}>\n          {myData => <p>{JSON.stringify(myData)}</p>}\n        </Await>\n      </Suspense>\n      <Link to=\"/\">Self</Link>\n      <a href=\"/\">Refresh</a>\n      <fetcher.Form method=\"post\" action=\"/test\">\n        <Button type=\"submit\" width=\"200px\" backgroundColor=\"red\" mt={4}>\n          Invalidate Cache\n        </Button>\n      </fetcher.Form>\n    </>;\n}\n_s(Index, \"dQsbPc8xtd543oXd0tEqDxcr0ZI=\", false, function () {\n  return [useLoaderData, useFetcher];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACqBlB,qBAAsB;AAEtB,IAAAA,gBAAyB;AAsChB;AA5DT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAWO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AAsBe,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,UAAU,WAAW;AAC3B,SAAO,sFACH;AAAA,uDAAC,qBAAU,qBAAX;AAAA;AAAA;AAAA;AAAA,WAAgB;AAAA,IAChB,mDAAC,0BAAS,UAAU,mDAAC,OAAE,0BAAH;AAAA;AAAA;AAAA;AAAA,WAAa,GAC/B,6DAAC,SAAM,SAAS,QACb,WAAAC,YAAU,mDAAC,OAAG,eAAK,UAAUA,OAAM,KAAzB;AAAA;AAAA;AAAA;AAAA,WAA2B,KADxC;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,QAAK,IAAG,KAAI,oBAAb;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,IACjB,mDAAC,OAAE,MAAK,KAAI,uBAAZ;AAAA;AAAA;AAAA;AAAA,WAAmB;AAAA,IACnB,mDAAC,QAAQ,MAAR,EAAa,QAAO,QAAO,QAAO,SACjC,6DAAC,kBAAO,MAAK,UAAS,OAAM,SAAQ,iBAAgB,OAAM,IAAI,GAAG,gCAAjE;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OAbG;AAAA;AAAA;AAAA;AAAA,SAcL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,eAAe,UAAU;AACnC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react", "myData"]
}
